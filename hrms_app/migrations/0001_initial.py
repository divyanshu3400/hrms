# Generated by Django 4.2.16 on 2024-10-22 12:07

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('official_email', models.EmailField(blank=True, help_text="Optional: Enter the user's official email address.", max_length=254, null=True, verbose_name='Official E-mail')),
                ('is_rm', models.BooleanField(default=False, help_text='Indicates whether the user is a manager.', verbose_name='Is Manager')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'tbl_user',
                'ordering': ['username'],
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AttendanceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(help_text='The date and time when attendance starts.', verbose_name='Start Date')),
                ('end_date', models.DateTimeField(help_text='The date and time when attendance ends.', verbose_name='End Date')),
                ('from_date', models.DateTimeField(blank=True, help_text='Optional field for specifying a starting date for regularization.', null=True, verbose_name='From Date')),
                ('to_date', models.DateTimeField(blank=True, help_text='Optional field for specifying an ending date for regularization.', null=True, verbose_name='To Date')),
                ('reg_duration', models.CharField(blank=True, help_text='Specify the duration for which regularization is requested.', max_length=100, null=True, verbose_name='Regularization Duration')),
                ('slug', models.SlugField(blank=True, help_text='A unique slug generated from the title, used for URL routing.', max_length=255, unique=True, verbose_name='Slug')),
                ('title', models.CharField(help_text='Enter a title for the attendance log.', max_length=255, verbose_name='Title')),
                ('is_regularisation', models.BooleanField(default=False, help_text='Indicate whether this entry is for regularization.', verbose_name='Is Regularisation')),
                ('duration', models.TimeField(blank=True, help_text='Specify the duration of attendance.', null=True, verbose_name='Duration')),
                ('reg_status', models.CharField(blank=True, choices=[('early going', 'Early Going'), ('late coming', 'Late Coming'), ('mis punching', 'Mis Punching')], help_text='The current status of the regularization request.', max_length=20, null=True, verbose_name='Regularization Status')),
                ('status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('recommended', 'Recommended'), ('not recommended', 'Not Recommended')], help_text='Current status of the attendance log.', max_length=20, null=True, verbose_name='Status')),
                ('att_status', models.CharField(choices=[('Half Day', 'Half Day'), ('Present', 'Present'), ('Absent', 'Absent')], help_text='Indicate the attendance status for this log entry.', max_length=20, verbose_name='Attendance Status')),
                ('att_status_short_code', models.CharField(blank=True, help_text='A short code representing the attendance status.', max_length=20, null=True, verbose_name='Short Code')),
                ('color_hex', models.CharField(blank=True, help_text='Optional: Color code associated with this attendance entry.', max_length=7, null=True, verbose_name='Color Hex Code')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reason', models.CharField(blank=True, help_text='Reason for the attendance entry.', max_length=100, null=True, verbose_name='Reason')),
                ('is_submitted', models.BooleanField(default=False, help_text='Indicate if the regularization has been submitted.', verbose_name='Is Submitted')),
            ],
            options={
                'verbose_name': 'Attendance Log',
                'verbose_name_plural': 'Attendance Logs',
                'db_table': 'tbl_events',
                'ordering': ['-created_at'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttendanceLogAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_by_name', models.CharField(max_length=255, verbose_name='Action By Name')),
                ('action_by_email', models.EmailField(max_length=254, verbose_name='Action By Email')),
                ('action', models.CharField(max_length=100, verbose_name='Action')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Attendance Log Action',
                'verbose_name_plural': 'Attendance Log Actions',
                'db_table': 'tbl_attendance_log_actions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttendanceSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_day_hours', models.PositiveIntegerField(default=8, verbose_name='Full Day Hours')),
                ('half_day_hours', models.PositiveIntegerField(default=4, verbose_name='Half Day Hours')),
                ('created_at', models.DateTimeField(auto_now=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now_add=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Attendance Setting',
                'verbose_name_plural': 'Attendance Settings',
                'db_table': 'tbl_attendance_setting',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttendanceStatusColor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Half Day', 'Half Day'), ('Present', 'Present'), ('Absent', 'Absent')], max_length=50, verbose_name='Status')),
                ('color', models.CharField(max_length=20, verbose_name='Color')),
                ('color_hex', models.CharField(blank=True, max_length=7, null=True, verbose_name='Color Hex Code')),
                ('created_at', models.DateTimeField(auto_now=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Attendance Status Color',
                'verbose_name_plural': 'Attendance Status Colors',
                'db_table': 'tbl_attendance_status_color',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BankDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_number', models.CharField(help_text='Enter the bank account number.', max_length=50, verbose_name='Account Number')),
                ('bank_name', models.CharField(help_text='Enter the name of the bank.', max_length=100, verbose_name='Bank Name')),
                ('branch_name', models.CharField(help_text='Enter the name of the bank branch.', max_length=100, verbose_name='Branch Name')),
                ('ifsc_code', models.CharField(help_text='Enter the IFSC code of the bank.', max_length=20, verbose_name='IFSC Code')),
                ('pan_number', models.CharField(help_text='Enter the PAN number of the user.', max_length=10, verbose_name='PAN Number')),
            ],
            options={
                'verbose_name': 'Bank Detail',
                'verbose_name_plural': 'Bank Details',
                'db_table': 'tbl_bank_detail',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Bill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bill_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Bill Amount')),
                ('bill_date', models.DateField(verbose_name='Bill Date')),
                ('bill_details', models.TextField(verbose_name='Bill Details')),
                ('bill_document', models.FileField(upload_to='bills/', verbose_name='Bill Document')),
                ('created_at', models.DateTimeField(auto_now=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Tour Bill',
                'verbose_name_plural': 'Tour Bills',
                'db_table': 'tbl_tour_bill',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CompensatoryOff',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, verbose_name='Unique ID')),
                ('worked_on', models.DateField(help_text='Date the employee worked.', verbose_name='Worked On')),
                ('expiry_date', models.DateField(help_text='Date the compensatory off expires.', verbose_name='Expiry Date')),
                ('reason', models.TextField(blank=True, help_text='Reason for working on the day and earning compensatory off.', null=True, verbose_name='Reason')),
                ('hours_earned', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(0.5)], verbose_name='Hours Earned')),
                ('status', models.CharField(choices=[('open', 'Open'), ('claimed', 'Claimed'), ('expired', 'Expired'), ('rejected', 'Rejected')], default='open', help_text='The current status of the compensatory off.', max_length=20, verbose_name='Status')),
                ('comments', models.TextField(blank=True, help_text='Additional notes', null=True, verbose_name='Comments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CompensatoryOffLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_by_name', models.CharField(max_length=255, verbose_name='Action By Name')),
                ('action_by_email', models.EmailField(max_length=254, verbose_name='Action By Email')),
                ('action', models.CharField(max_length=100, verbose_name='Action')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Compensatory Off Log',
                'verbose_name_plural': 'Compensatory Off Logs',
                'db_table': 'tbl_compensatory_off_log',
                'ordering': ['-timestamp'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorrespondingAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_line_1', models.CharField(blank=True, help_text='Optional: Enter the first line of the address.', max_length=100, null=True, verbose_name='Address Line 1')),
                ('address_line_2', models.CharField(blank=True, help_text='Optional: Enter the second line of the address.', max_length=100, null=True, verbose_name='Address Line 2')),
                ('country', models.CharField(blank=True, help_text='Optional: Enter the country for this address.', max_length=50, null=True, verbose_name='Country')),
                ('district', models.CharField(blank=True, help_text='Optional: Enter the district for this address.', max_length=50, null=True, verbose_name='District')),
                ('state', models.CharField(blank=True, help_text='Optional: Enter the state for this address.', max_length=50, null=True, verbose_name='State')),
                ('zipcode', models.CharField(blank=True, help_text='Optional: Enter the postal code for this address.', max_length=10, null=True, verbose_name='ZIP Code')),
            ],
            options={
                'verbose_name': 'Corresponding Address',
                'verbose_name_plural': 'Corresponding Addresses',
                'db_table': 'tbl_correspondence_address',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(help_text='Enter the name of the department.', max_length=100, verbose_name='Department')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the department is active.', verbose_name='Is Active')),
                ('slug', models.SlugField(help_text='Unique slug for the department. Automatically generated if left blank.', max_length=100, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now=True, help_text='The date and time when the department was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the department was last updated.', verbose_name='Updated At')),
                ('description', models.TextField(blank=True, help_text='Optional: Provide a description of the department.', null=True)),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
                'db_table': 'tbl_department',
                'ordering': ['department'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Designation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Unique slug for the designation. Automatically generated if left blank.', max_length=100, unique=True, verbose_name='Slug')),
                ('designation', models.CharField(help_text='Enter the name of the designation.', max_length=100, verbose_name='Designation')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the designation is active.', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the designation was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the designation was last updated.', verbose_name='Updated At')),
                ('description', models.TextField(blank=True, help_text='Optional: Provide a description of the designation.', null=True)),
            ],
            options={
                'verbose_name': 'Designation',
                'verbose_name_plural': 'Designations',
                'db_table': 'tbl_designation',
                'ordering': ['designation'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DeviceInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_date', models.DateTimeField(help_text='Enter the start date and time for the transaction log.', verbose_name='From Date')),
                ('to_date', models.DateTimeField(help_text='Enter the end date and time for the transaction log.', verbose_name='To Date')),
                ('serial_number', models.CharField(help_text='Enter the device serial number.', max_length=50, unique=True, verbose_name='Serial Number')),
                ('username', models.CharField(help_text='Enter the API username for authentication.', max_length=30, verbose_name='Username')),
                ('password', models.CharField(help_text='Enter the API password for authentication.', max_length=50, verbose_name='Password')),
                ('api_link', models.URLField(default='http://1.22.197.176:99/iclock/WebAPIService.asmx', help_text='Enter the API link for the device.', verbose_name='API Link')),
            ],
            options={
                'verbose_name': 'Device Information',
                'verbose_name_plural': 'Device Information Records',
                'db_table': 'tbl_device_information',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EmployeeShift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this record was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Employee Shift',
                'verbose_name_plural': 'Employee Shifts',
                'db_table': 'tbl_employee_shift',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_name', models.CharField(help_text='Enter the name of the family member.', max_length=100, verbose_name='Member Name')),
                ('relationship', models.CharField(choices=[('Spouse', 'Spouse'), ('Child', 'Child'), ('Parent', 'Parent'), ('Sibling', 'Sibling'), ('Other', 'Other')], help_text='Select the relationship of the family member to the employee.', max_length=20, verbose_name='Relationship')),
                ('contact_number', models.CharField(blank=True, help_text='Enter the contact number of the family member (optional).', max_length=15, null=True, verbose_name='Contact Number')),
            ],
            options={
                'verbose_name': 'Family Detail',
                'verbose_name_plural': 'Family Details',
                'db_table': 'tbl_family_details',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FormProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step', models.CharField(max_length=255)),
                ('data', models.JSONField()),
                ('status', models.CharField(choices=[('in-progress', 'In Progress'), ('completed', 'Completed')], default='in-progress', max_length=20)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Updated At')),
            ],
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(help_text='Enter the gender value (e.g., Male, Female, etc.).', max_length=30, verbose_name='Gender')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the gender is active.', verbose_name='Is Active')),
                ('updated_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this record was last updated.', verbose_name='Updated At')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this record was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Gender',
                'verbose_name_plural': 'Genders',
                'db_table': 'tbl_gender',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('short_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Short Code')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('desc', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('color_hex', models.CharField(blank=True, max_length=7, null=True, verbose_name='Color Hex Code')),
                ('created_at', models.DateTimeField(auto_now=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now_add=True, verbose_name='Updated At')),
                ('is_yearly_recurring', models.BooleanField(default=False, verbose_name='Is Yearly Recurring')),
                ('year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Year')),
                ('recurrence_pattern', models.CharField(blank=True, choices=[('fixed', 'Fixed Date'), ('relative', 'Relative to a Date'), ('custom', 'Custom Recurrence')], max_length=50, null=True, verbose_name='Recurrence Pattern')),
                ('recurrence_rule', models.CharField(blank=True, max_length=255, null=True, verbose_name='Recurrence Rule')),
            ],
            options={
                'verbose_name': 'Holiday',
                'verbose_name_plural': 'Holidays',
                'db_table': 'tbl_holidays',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LeaveApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applicationNo', models.CharField(help_text='Unique identifier for the leave application.', max_length=200, unique=True, verbose_name='Application No')),
                ('applyingDate', models.DateTimeField(auto_now=True, verbose_name='Applying Date')),
                ('startDate', models.DateTimeField(help_text='The date when the leave begins.', verbose_name='Start Date')),
                ('endDate', models.DateTimeField(blank=True, help_text='The date when the leave ends. Leave can be of a single day or multiple days.', null=True, verbose_name='End Date')),
                ('usedLeave', models.FloatField(help_text='Total leave days used for this application.', verbose_name='Used Leave')),
                ('balanceLeave', models.FloatField(help_text='Remaining leave days available after this application.', verbose_name='Balance Leave')),
                ('reason', models.TextField(blank=True, help_text='Reason for applying leave.', verbose_name='Reason')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled'), ('pending_cancellation', 'Pending Cancellation')], default='pending', help_text='Current status of the leave application.', max_length=30, verbose_name='Status')),
                ('startDayChoice', models.CharField(choices=[('1', 'Full Day'), ('2', 'First Half (Morning)'), ('3', 'Second Half (Afternoon)')], default='1', help_text='Choose whether the leave starts at the beginning or the end of the day.', max_length=20, verbose_name='Start Day Choice')),
                ('endDayChoice', models.CharField(choices=[('1', 'Full Day'), ('2', 'First Half (Morning)'), ('3', 'Second Half (Afternoon)')], default='1', help_text='Choose whether the leave ends at the beginning or the end of the day.', max_length=20, verbose_name='End Day Choice')),
                ('updatedAt', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('slug', models.SlugField(blank=True, editable=False, help_text='Automatically generated unique identifier for the leave application.', max_length=255, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Leave Application',
                'verbose_name_plural': 'Leave Applications',
                'db_table': 'tbl_leave_application',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LeaveBalanceOpenings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(default=2024, help_text='The year for which the leave balance is applicable.', verbose_name='Year')),
                ('no_of_leaves', models.FloatField(blank=True, help_text='The total number of leaves allocated to the user for this leave type.', null=True, verbose_name='Number of Leaves')),
                ('remaining_leave_balances', models.FloatField(blank=True, help_text='The remaining balance of leaves available to the user for this leave type.', null=True, verbose_name='Remaining Leave Balance')),
                ('opening_balance', models.FloatField(default=0, help_text='Initial balance of leave days for the year.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Opening Balance')),
                ('closing_balance', models.FloatField(default=0, help_text='Final balance of leave days for the year.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Closing Balance')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Leave Balance',
                'verbose_name_plural': 'Leave Balances',
                'db_table': 'tbl_leave_balance_openings',
                'ordering': ['year', 'leave_type'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LeaveDayChoiceAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_day_choice', models.CharField(choices=[('1', 'Full Day'), ('2', 'First Half (Morning)'), ('3', 'Second Half (Afternoon)')], max_length=20, verbose_name='Start Day Choice')),
                ('end_day_choice', models.CharField(choices=[('1', 'Full Day'), ('2', 'First Half (Morning)'), ('3', 'Second Half (Afternoon)')], max_length=20, verbose_name='End Day Choice')),
                ('adjustment_value', models.FloatField(verbose_name='Adjustment Value')),
            ],
            options={
                'verbose_name': 'Leave Day Choice Adjustment',
                'verbose_name_plural': 'Leave Day Choice Adjustments',
            },
        ),
        migrations.CreateModel(
            name='LeaveLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_by_name', models.CharField(max_length=255, verbose_name='Action By Name')),
                ('action_by_email', models.EmailField(max_length=254, verbose_name='Action By Email')),
                ('action', models.CharField(max_length=100, verbose_name='Action')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Leave Log',
                'verbose_name_plural': 'Leave Logs',
                'db_table': 'tbl_leave_log',
                'ordering': ['-timestamp'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LeaveTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_date', models.DateField(default=django.utils.timezone.now, help_text='The date when the leave transaction is recorded.', verbose_name='Transaction Date')),
                ('days_applied', models.FloatField(help_text='Number of leave days applied for in this transaction.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Days Applied')),
                ('days_approved', models.FloatField(default=0, help_text='Number of leave days that have been approved.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Days Approved')),
                ('remarks', models.TextField(blank=True, help_text='Any additional remarks regarding the leave transaction.', null=True, verbose_name='Remarks')),
            ],
            options={
                'verbose_name': 'Leave Transaction',
                'verbose_name_plural': 'Leave Transactions',
                'db_table': 'tbl_leave_transaction',
                'ordering': ['-transaction_date'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LeaveType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leave_type', models.CharField(choices=[('Unpaid Leave (LWP)', 'Unpaid Leave (LWP)'), ('Casual Leave (CL)', 'Casual Leave (CL)'), ('Sick Leave (SL)', 'Sick Leave (SL)'), ('Earned Leave (EL)', 'Earned Leave (EL)'), ('Maternity Leave (ML)', 'Maternity Leave (ML)'), ('Comp OFF', 'Comp OFF (CO)')], help_text='Select the type of leave (e.g., Sick Leave, Casual Leave). This must be unique.', max_length=100, unique=True, verbose_name='Leave Type')),
                ('leave_type_short_code', models.CharField(blank=True, help_text='Provide a short code for the leave type (optional). This must be unique if provided.', max_length=100, null=True, unique=True, verbose_name='Leave Type Short Code')),
                ('default_allocation', models.FloatField(blank=True, help_text='Set the default number of days allocated for this leave type.', null=True, verbose_name='Default Allocation')),
                ('min_notice_days', models.FloatField(blank=True, help_text='Specify the minimum number of days notice required before applying for this leave.', null=True, verbose_name='Minimum Notice Days')),
                ('max_days_limit', models.FloatField(blank=True, help_text='Set the maximum number of consecutive days that can be taken for this leave type.', null=True, verbose_name='Maximum Days Limit')),
                ('min_days_limit', models.FloatField(blank=True, help_text='Set the minimum number of consecutive days that can be taken for this leave type.', null=True, verbose_name='Minimum Days Limit')),
                ('allowed_days_per_year', models.FloatField(blank=True, help_text='Specify the total number of days allowed for this leave type per year.', null=True, verbose_name='Allowed Days Per Year')),
                ('leave_fy_start', models.DateField(blank=True, help_text='Define the start of the financial year for leave calculations (optional).', null=True, verbose_name='Leave FY Start')),
                ('leave_fy_end', models.DateField(blank=True, help_text='Define the end of the financial year for leave calculations (optional).', null=True, verbose_name='Leave FY End')),
                ('color_hex', models.CharField(blank=True, help_text='Enter a hex color code to represent this leave type in the system.', max_length=7, null=True, verbose_name='Color Hex Code')),
                ('text_color_hex', models.CharField(blank=True, help_text='Enter a hex color code for the text color to be used with this leave type.', max_length=7, null=True, verbose_name='Text Color Hex Code')),
                ('created_at', models.DateTimeField(auto_now=True, help_text='The date and time when this leave type was created (automatically set).', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this leave type was last updated (automatically set).', verbose_name='Updated At')),
                ('consecutive_restriction', models.BooleanField(default=False, help_text='Check if consecutive leave applications are not allowed for this leave type.', verbose_name='Consecutive Leave Restriction')),
            ],
            options={
                'verbose_name': 'Leave Type',
                'verbose_name_plural': 'Leave Types',
                'db_table': 'tbl_leave_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Logo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.CharField(help_text='Provide the name of the logo.', max_length=100, verbose_name='Logo')),
                ('logo_image', models.ImageField(blank=True, help_text='Optional: Upload an image for the logo.', null=True, upload_to='logos/', verbose_name='Logo Image')),
            ],
            options={
                'verbose_name': 'Logo',
                'verbose_name_plural': 'Logos',
                'db_table': 'tbl_logo',
                'ordering': ['logo'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MaritalStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marital_status', models.CharField(help_text='Enter the marital status value (e.g., Single, Married, etc.).', max_length=30, verbose_name='Marital Status')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the marital status is active.', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now=True, help_text='The date and time when this record was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Marital Status',
                'verbose_name_plural': 'Marital Statuses',
                'db_table': 'tbl_marital_status',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(help_text='The content of the notification.', max_length=255, verbose_name='Notification Message')),
                ('notification_type', models.CharField(blank=True, choices=[('leave_status', 'Leave Status'), ('tour_status', 'Tour Status'), ('comp_off_status', 'Compensatory Off Status'), ('chat', 'Chat'), ('attendance_reg', 'Attendance Regularization')], help_text='The type of notification being sent.', max_length=50, null=True, verbose_name='Notification Type')),
                ('related_object_id', models.PositiveIntegerField(blank=True, help_text='The ID of the related object associated with this notification.', null=True, verbose_name='Related Object ID')),
                ('target_url', models.URLField(blank=True, help_text='The URL for web navigation related to this notification.', max_length=500, null=True, verbose_name='Target URL')),
                ('payload_data', models.JSONField(blank=True, null=True, verbose_name='Payload Data')),
                ('go_route_mobile', models.CharField(blank=True, help_text='The mobile deep link for navigating to the related content.', max_length=255, null=True, verbose_name='Mobile Deep Link')),
                ('desktop_notification_data', models.JSONField(blank=True, null=True, verbose_name='Desktop Notification Data')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='The time when the notification was created.', verbose_name='Timestamp')),
                ('is_read', models.BooleanField(default=False, help_text='Indicates whether the notification has been read.', verbose_name='Read Status')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'db_table': 'tbl_notification',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NotificationSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receive_notifications', models.BooleanField(default=True, help_text='Enable or disable all notifications.', verbose_name='Receive Notifications')),
                ('receive_sound_notifications', models.BooleanField(default=True, help_text='Enable or disable sound for notifications.', verbose_name='Receive Sound Notifications')),
                ('receive_desktop_notifications', models.BooleanField(default=True, help_text='Enable or disable notifications on desktop.', verbose_name='Receive Desktop Notifications')),
                ('receive_mobile_notifications', models.BooleanField(default=True, help_text='Enable or disable notifications on mobile.', verbose_name='Receive Mobile Notifications')),
                ('receive_message_notifications', models.BooleanField(default=True, help_text='Enable or disable notifications for new messages.', verbose_name='Receive Message Notifications')),
                ('receive_mention_notifications', models.BooleanField(default=True, help_text='Enable or disable notifications when you are mentioned.', verbose_name='Receive Mention Notifications')),
                ('receive_like_notifications', models.BooleanField(default=True, help_text='Enable or disable notifications for likes.', verbose_name='Receive Like Notifications')),
                ('receive_comment_notifications', models.BooleanField(default=True, help_text='Enable or disable notifications for new comments.', verbose_name='Receive Comment Notifications')),
                ('notification_frequency', models.CharField(choices=[('immediate', 'Immediate'), ('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly')], default='immediate', help_text='Choose how often to receive notifications.', max_length=20, verbose_name='Notification Frequency')),
                ('notification_importance', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', help_text='Set the importance level for notifications.', max_length=20, verbose_name='Notification Importance')),
                ('desktop_notification_sound', models.CharField(blank=True, help_text='Specify the sound file for desktop notifications.', max_length=100, null=True, verbose_name='Desktop Notification Sound')),
                ('mobile_notification_sound', models.CharField(blank=True, help_text='Specify the sound file for mobile notifications.', max_length=100, null=True, verbose_name='Mobile Notification Sound')),
                ('do_not_disturb_mode', models.BooleanField(default=False, help_text='Enable to mute notifications during specified hours.', verbose_name='Do Not Disturb Mode')),
                ('notification_history', models.TextField(blank=True, help_text='Log of previous notifications sent to the user.', null=True, verbose_name='Notification History')),
            ],
            options={
                'verbose_name': 'Notification Setting',
                'verbose_name_plural': 'Notification Settings',
                'db_table': 'tbl_notification_settings',
                'ordering': ['user'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OfficeLocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID for this location, generated automatically.', primary_key=True, serialize=False, verbose_name='Unique Identifier')),
                ('location_name', models.CharField(help_text='Enter the name of the location (e.g., Head Office, Cluster Office, etc.)', max_length=100, verbose_name='Location Name')),
                ('office_type', models.CharField(choices=[('head_office', 'Head Office'), ('cluster_office', 'Cluster Office'), ('mcc', 'MCC'), ('bmc', 'BMC'), ('mpp', 'BMC')], help_text='Specify the type of office (Head Office, Cluster Office, MCC, BMC, MPP).', max_length=50, verbose_name='Office Type')),
                ('address', models.TextField(help_text='Enter the complete address of the location.', verbose_name='Address')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Enter the latitude of the location.', max_digits=9, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='Enter the longitude of the location.', max_digits=9, null=True, verbose_name='Longitude')),
                ('created_at', models.DateTimeField(auto_now=True, help_text='The date and time when this record was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this record was last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Office Location',
                'verbose_name_plural': 'Office Locations',
                'ordering': ['location_name'],
            },
        ),
        migrations.CreateModel(
            name='PermanentAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_line_1', models.CharField(help_text='Enter the first line of the address.', max_length=100, verbose_name='Address Line 1')),
                ('address_line_2', models.CharField(blank=True, help_text='Optional: Enter the second line of the address.', max_length=100, null=True, verbose_name='Address Line 2')),
                ('country', models.CharField(help_text='Enter the country for this address.', max_length=50, verbose_name='Country')),
                ('district', models.CharField(help_text='Enter the district for this address.', max_length=50, verbose_name='District')),
                ('state', models.CharField(help_text='Enter the state for this address.', max_length=50, verbose_name='State')),
                ('zipcode', models.CharField(help_text='Enter the postal code for this address.', max_length=10, verbose_name='ZIP Code')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether this address is active.', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now=True, help_text='The date and time when this record was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Permanent Address',
                'verbose_name_plural': 'Permanent Addresses',
                'db_table': 'tbl_permanent_address',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PersonalDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_code', models.CharField(help_text='Enter the employee code with company short code prefix.', max_length=100, unique=True, verbose_name='Employee Code')),
                ('avatar', models.FileField(blank=True, help_text='Upload a profile picture for the employee.', null=True, upload_to='avatar/', verbose_name='Avatar')),
                ('mobile_number', models.CharField(help_text="Enter the employee's personal mobile number.", max_length=15, unique=True, verbose_name='Mobile Number')),
                ('alt_mobile_number', models.CharField(blank=True, help_text='Enter an alternate mobile number for the employee (optional).', max_length=15, verbose_name='Alternative Mobile Number')),
                ('cug_mobile_number', models.CharField(blank=True, help_text="Enter the company's mobile number for the employee (optional).", max_length=15, verbose_name='Company Mobile Number')),
                ('official_mobile_number', models.CharField(help_text="Enter the employee's official mobile number.", max_length=15, unique=True, verbose_name='Official Mobile Number')),
                ('birthday', models.DateField(blank=True, help_text="Enter the employee's birthday (optional).", null=True, verbose_name='Birthday')),
                ('marriage_ann', models.DateField(blank=True, help_text="Enter the employee's marriage anniversary (optional).", null=True, verbose_name='Marriage Anniversary')),
                ('ctc', models.DecimalField(blank=True, decimal_places=2, help_text="Enter the employee's Cost to Company (CTC) (optional).", max_digits=10, null=True, verbose_name='CTC')),
                ('ann_date', models.DateField(blank=True, help_text="Enter the employee's job anniversary (optional).", null=True, verbose_name='Job Anniversary')),
                ('doj', models.DateField(help_text="Enter the employee's date of joining.", verbose_name='Date of Joining')),
                ('dol', models.DateField(blank=True, help_text="Enter the employee's date of leaving (if applicable).", null=True, verbose_name='Date of Leaving')),
                ('dor', models.DateField(blank=True, help_text="Enter the employee's date of resignation (if applicable).", null=True, verbose_name='Date of Resignation')),
                ('dot', models.DateField(blank=True, help_text="Enter the employee's date of transfer (if transferred to other location).", null=True, verbose_name='Date of Transfer')),
                ('dof', models.DateField(blank=True, help_text="Enter the employee's final settlement date (if applicable).", null=True, verbose_name='Date of Final Settlement')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when this record was last updated.', verbose_name='Updated At')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this record was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Personal Detail',
                'verbose_name_plural': 'Personal Details',
                'db_table': 'tbl_personal_details',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Religion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('religion', models.CharField(help_text='Enter the religion (e.g., Christianity, Islam, Hinduism, etc.).', max_length=100, unique=True, verbose_name='Religion')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether this religion is active.', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this record was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Religion',
                'verbose_name_plural': 'Religions',
                'db_table': 'tbl_religion',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('on role', 'On-Role'), ('off role', 'Off-Role')], help_text='Select a role for the user. This field is required.', max_length=50, verbose_name='Role Name')),
                ('description', models.TextField(blank=True, help_text='Optional: Provide a brief description of the role.', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'db_table': 'tbl_role',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserTour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_destination', models.CharField(help_text='Enter the location from which the tour starts.', max_length=255, verbose_name='From Destination')),
                ('to_destination', models.CharField(help_text='Enter the destination where the tour ends.', max_length=255, verbose_name='To Destination')),
                ('start_date', models.DateField(help_text='Select the start date of the tour.', verbose_name='Start Date')),
                ('start_time', models.TimeField(blank=True, help_text='Select the start time of the tour.', null=True, verbose_name='Start Time')),
                ('end_date', models.DateField(help_text='Select the end date of the tour.', verbose_name='End Date')),
                ('end_time', models.TimeField(blank=True, help_text='Select the end time of the tour.', null=True, verbose_name='End Time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('remarks', models.TextField(blank=True, help_text='Any additional notes or comments about the tour.', null=True, verbose_name='Remarks')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('extended', 'Extended'), ('pending_cancellation', 'Pending Cancellation')], default='pending', help_text='Current status of the tour.', max_length=50, verbose_name='Status')),
                ('extended_end_date', models.DateField(blank=True, help_text='If applicable, enter the new end date after extension.', null=True, verbose_name='Extended End Date')),
                ('extended_end_time', models.TimeField(blank=True, help_text='If applicable, enter the new end time after extension.', null=True, verbose_name='Extended End Time')),
                ('bills_submitted', models.BooleanField(default=False, help_text='Indicate whether bills related to the tour have been submitted.', verbose_name='Bills Submitted')),
                ('slug', models.SlugField(blank=True, help_text='A unique identifier for the tour, used in URLs.', max_length=255, null=True, unique=True, verbose_name='Slug')),
                ('approval_type', models.CharField(blank=True, choices=[('pre approval', 'Pre Approval'), ('post approval', 'Post Approval')], help_text='Select the type of approval required for this tour.', max_length=100, null=True, verbose_name='Approval Type')),
                ('applied_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tours', to=settings.AUTH_USER_MODEL, verbose_name='Applied By')),
            ],
            options={
                'verbose_name': 'User Tour',
                'verbose_name_plural': "Users' Tours",
                'db_table': 'tbl_user_tours',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TourStatusLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_by_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Action By Name')),
                ('action_by_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Action By Email')),
                ('action', models.CharField(blank=True, max_length=100, null=True, verbose_name='Action')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('extended', 'Extended'), ('pending_cancellation', 'Pending Cancellation')], default='pending', max_length=50, verbose_name='Status')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('action_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Action By')),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='hrms_app.usertour', verbose_name='Tour')),
            ],
            options={
                'verbose_name': 'Tour Status Log',
                'verbose_name_plural': 'Tour Status Logs',
                'db_table': 'tbl_tour_status_log',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ShiftTiming',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField(help_text='Enter the start time for the shift.', verbose_name='Start Time')),
                ('end_time', models.TimeField(help_text='Enter the end time for the shift.', verbose_name='End Time')),
                ('grace_time', models.IntegerField(blank=True, help_text='Enter the grace time for late arrivals (in minutes, optional).', null=True, verbose_name='Grace Time (minutes)')),
                ('grace_start_time', models.TimeField(blank=True, help_text='Enter the start time for the grace period (optional).', null=True, verbose_name='Grace Start Time')),
                ('grace_end_time', models.TimeField(blank=True, help_text='Enter the end time for the grace period (optional).', null=True, verbose_name='Grace End Time')),
                ('break_start_time', models.TimeField(blank=True, help_text='Enter the start time for the break (optional).', null=True, verbose_name='Break Start Time')),
                ('break_end_time', models.TimeField(blank=True, help_text='Enter the end time for the break (optional).', null=True, verbose_name='Break End Time')),
                ('break_duration', models.IntegerField(blank=True, help_text='The calculated break duration in minutes, automatically set when both start and end times are provided.', null=True, verbose_name='Break Duration (minutes)')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether this shift timing is active.', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this record was created.', verbose_name='Created At')),
                ('role', models.ForeignKey(blank=True, help_text='Assign this shift to a specific role (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_app.role', verbose_name='Role')),
            ],
            options={
                'verbose_name': 'Shift Timing',
                'verbose_name_plural': 'Shift Timings',
                'db_table': 'tbl_shift_timing',
            },
        ),
        migrations.CreateModel(
            name='SentEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_emails', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='emails_sent', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sent Mail',
                'verbose_name_plural': 'Sent Mails',
                'db_table': 'tbl_sent_email',
                'managed': True,
            },
        ),
        migrations.AddConstraint(
            model_name='role',
            constraint=models.UniqueConstraint(fields=('name',), name='unique_role_name'),
        ),
        migrations.AddIndex(
            model_name='religion',
            index=models.Index(fields=['religion'], name='idx_religion'),
        ),
        migrations.AddField(
            model_name='personaldetails',
            name='created_by',
            field=models.ForeignKey(help_text='The user who created this record.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pd_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='personaldetails',
            name='designation',
            field=models.ForeignKey(help_text="Select the employee's designation.", on_delete=django.db.models.deletion.CASCADE, to='hrms_app.designation', verbose_name='Designation'),
        ),
        migrations.AddField(
            model_name='personaldetails',
            name='gender',
            field=models.ForeignKey(blank=True, help_text="Select the employee's gender.", null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_app.gender', verbose_name='Gender'),
        ),
        migrations.AddField(
            model_name='personaldetails',
            name='marital_status',
            field=models.ForeignKey(blank=True, help_text="Select the employee's marital status (optional).", null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_app.maritalstatus', verbose_name='Marital Status'),
        ),
        migrations.AddField(
            model_name='personaldetails',
            name='religion',
            field=models.ForeignKey(blank=True, help_text="Select the employee's religion (optional).", null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_app.religion', verbose_name='Religion'),
        ),
        migrations.AddField(
            model_name='personaldetails',
            name='updated_by',
            field=models.ForeignKey(help_text='The user who last updated this record.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pd_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='personaldetails',
            name='user',
            field=models.OneToOneField(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='personal_detail', to=settings.AUTH_USER_MODEL, verbose_name='Employee'),
        ),
        migrations.AddField(
            model_name='permanentaddress',
            name='user',
            field=models.ForeignKey(blank=True, help_text='Select the employee to associate with this permanent address.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='permanent_addresses', to=settings.AUTH_USER_MODEL, verbose_name='Employee'),
        ),
        migrations.AddField(
            model_name='officelocation',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The user who created this record.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='officelocation',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='The user who last updated this record.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='notificationsetting',
            name='user',
            field=models.OneToOneField(help_text='The user to whom these notification settings apply.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='notification',
            name='receiver',
            field=models.ForeignKey(blank=True, help_text='The user who receives the notification.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Receiver'),
        ),
        migrations.AddField(
            model_name='notification',
            name='related_content_type',
            field=models.ForeignKey(blank=True, help_text='The type of the related object (model) this notification is linked to.', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Related Content Type'),
        ),
        migrations.AddField(
            model_name='notification',
            name='sender',
            field=models.ForeignKey(help_text='The user who sent the notification.', on_delete=django.db.models.deletion.CASCADE, related_name='notifications_sent', to=settings.AUTH_USER_MODEL, verbose_name='Sender'),
        ),
        migrations.AddIndex(
            model_name='maritalstatus',
            index=models.Index(fields=['marital_status'], name='idx_marital_status'),
        ),
        migrations.AddField(
            model_name='leavetype',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The user who created this leave type (set automatically).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_leave_types', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='leavetype',
            name='restricted_after_leave_types',
            field=models.ManyToManyField(blank=True, help_text='Select leave types after which this leave type cannot be applied consecutively.', related_name='restricted_by_leave_types', to='hrms_app.leavetype', verbose_name='Restricted After Leave Types'),
        ),
        migrations.AddField(
            model_name='leavetype',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='The user who last updated this leave type (set automatically).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_leave_types', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='leavetransaction',
            name='leave_balance',
            field=models.ForeignKey(help_text='The leave balance associated with this transaction.', on_delete=django.db.models.deletion.CASCADE, to='hrms_app.leavebalanceopenings', verbose_name='Leave Balance'),
        ),
        migrations.AddField(
            model_name='leavetransaction',
            name='leave_type',
            field=models.ForeignKey(help_text='The type of leave being requested (e.g., sick leave, vacation).', on_delete=django.db.models.deletion.CASCADE, to='hrms_app.leavetype', verbose_name='Leave Type'),
        ),
        migrations.AddField(
            model_name='leavetransaction',
            name='user',
            field=models.ForeignKey(help_text='The user for whom the leave transaction is recorded.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='leavelog',
            name='action_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Action By'),
        ),
        migrations.AddField(
            model_name='leavelog',
            name='leave_application',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='hrms_app.leaveapplication', verbose_name='Leave Application'),
        ),
        migrations.AlterUniqueTogether(
            name='leavedaychoiceadjustment',
            unique_together={('start_day_choice', 'end_day_choice')},
        ),
        migrations.AddField(
            model_name='leavebalanceopenings',
            name='created_by',
            field=models.ForeignKey(help_text='User who created this leave balance entry.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leave_balance_creators', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='leavebalanceopenings',
            name='leave_type',
            field=models.ForeignKey(help_text='The type of leave associated with this balance.', on_delete=django.db.models.deletion.CASCADE, to='hrms_app.leavetype', verbose_name='Leave Type'),
        ),
        migrations.AddField(
            model_name='leavebalanceopenings',
            name='updated_by',
            field=models.ForeignKey(help_text='User who last updated this leave balance entry.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leave_balance_updaters', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='leavebalanceopenings',
            name='user',
            field=models.ForeignKey(help_text='The user whose leave balance is being tracked.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='leaveapplication',
            name='appliedBy',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaves', to=settings.AUTH_USER_MODEL, verbose_name='Applied By'),
        ),
        migrations.AddField(
            model_name='leaveapplication',
            name='leave_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leave_applications', to='hrms_app.leavetype', verbose_name='Leave Type'),
        ),
        migrations.AddField(
            model_name='holiday',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_holidays', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='holiday',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_holidays', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='gender',
            name='created_by',
            field=models.ForeignKey(help_text='The user who created this record.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gender_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='gender',
            name='updated_by',
            field=models.ForeignKey(help_text='The user who last updated this record.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gender_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='formprogress',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='family',
            name='user',
            field=models.ForeignKey(help_text='Select the employee associated with this family member.', on_delete=django.db.models.deletion.CASCADE, related_name='families', to=settings.AUTH_USER_MODEL, verbose_name='Employee'),
        ),
        migrations.AddField(
            model_name='employeeshift',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The user who created this shift record.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shift_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='employeeshift',
            name='employee',
            field=models.ForeignKey(help_text='Select the employee associated with this shift.', on_delete=django.db.models.deletion.CASCADE, related_name='shifts', to=settings.AUTH_USER_MODEL, verbose_name='Employee'),
        ),
        migrations.AddField(
            model_name='employeeshift',
            name='shift_timing',
            field=models.ForeignKey(help_text='Select the shift timing for the employee.', on_delete=django.db.models.deletion.CASCADE, to='hrms_app.shifttiming', verbose_name='Shift Timing'),
        ),
        migrations.AddField(
            model_name='deviceinformation',
            name='device_location',
            field=models.ForeignKey(blank=True, help_text='Where this device is located. For ex: - MCC or Cluster office location', null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_app.officelocation', verbose_name='Device Location'),
        ),
        migrations.AddField(
            model_name='designation',
            name='created_by',
            field=models.ForeignKey(help_text='The user who created this designation.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='designation_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='designation',
            name='department',
            field=models.ForeignKey(help_text='Select the department for this designation.', on_delete=django.db.models.deletion.CASCADE, to='hrms_app.department', verbose_name='Department'),
        ),
        migrations.AddField(
            model_name='designation',
            name='updated_by',
            field=models.ForeignKey(help_text='The user who last updated this designation.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='designation_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='department',
            name='created_by',
            field=models.ForeignKey(help_text='The user who created this department.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='department_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='department',
            name='updated_by',
            field=models.ForeignKey(help_text='The user who last updated this department.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='department_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='correspondingaddress',
            name='user',
            field=models.ForeignKey(blank=True, help_text='Select the employee to associate with this corresponding address.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='corres_addresses', to=settings.AUTH_USER_MODEL, verbose_name='Employee'),
        ),
        migrations.AddField(
            model_name='compensatoryofflog',
            name='action_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Action By'),
        ),
        migrations.AddField(
            model_name='compensatoryofflog',
            name='compensatory_off',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='hrms_app.compensatoryoff', verbose_name='Compensatory Off'),
        ),
        migrations.AddField(
            model_name='compensatoryoff',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_comp_offs', to=settings.AUTH_USER_MODEL, verbose_name='Approved By'),
        ),
        migrations.AddField(
            model_name='compensatoryoff',
            name='leave_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_app.leavetype', verbose_name='Leave Type'),
        ),
        migrations.AddField(
            model_name='compensatoryoff',
            name='user',
            field=models.ForeignKey(help_text='The employee who earned this compensatory off.', on_delete=django.db.models.deletion.CASCADE, related_name='compensatory_offs', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='bill',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tour_bills', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='bill',
            name='tour',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hrms_app.usertour', verbose_name='Tour'),
        ),
        migrations.AddField(
            model_name='bill',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_tour_bills', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='bankdetails',
            name='user',
            field=models.ForeignKey(help_text='Select the user associated with these bank details.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='attendancelogaction',
            name='action_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Action By'),
        ),
        migrations.AddField(
            model_name='attendancelogaction',
            name='log',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='hrms_app.attendancelog', verbose_name='Attendance Log'),
        ),
        migrations.AddField(
            model_name='attendancelog',
            name='applied_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_log', to=settings.AUTH_USER_MODEL, verbose_name='Applied By'),
        ),
        migrations.AddField(
            model_name='attendancelog',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this attendance log entry.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='device_location',
            field=models.ForeignKey(blank=True, help_text='Specify the location where this device is located. Example: MCC or Cluster office location.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_app.officelocation', verbose_name='Device Location'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='reports_to',
            field=models.ForeignKey(blank=True, help_text='Select the manager this user reports to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to=settings.AUTH_USER_MODEL, verbose_name='Reports To'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='role',
            field=models.ForeignKey(blank=True, help_text='Select a role for the user.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_app.role', verbose_name='Role'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='usertour',
            index=models.Index(fields=['status'], name='tbl_user_to_status_561a11_idx'),
        ),
        migrations.AddIndex(
            model_name='usertour',
            index=models.Index(fields=['start_date'], name='tbl_user_to_start_d_6b4312_idx'),
        ),
        migrations.AddIndex(
            model_name='usertour',
            index=models.Index(fields=['end_date'], name='tbl_user_to_end_dat_5915f5_idx'),
        ),
        migrations.AddIndex(
            model_name='usertour',
            index=models.Index(fields=['slug'], name='tbl_user_to_slug_2cd5ad_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usertour',
            unique_together={('applied_by', 'slug')},
        ),
        migrations.AddIndex(
            model_name='shifttiming',
            index=models.Index(fields=['start_time', 'end_time'], name='idx_shift_timing'),
        ),
        migrations.AddIndex(
            model_name='personaldetails',
            index=models.Index(fields=['employee_code'], name='idx_employee_code'),
        ),
        migrations.AddIndex(
            model_name='permanentaddress',
            index=models.Index(fields=['zipcode'], name='idx_permanent_zipcode'),
        ),
        migrations.AddIndex(
            model_name='notificationsetting',
            index=models.Index(fields=['user'], name='user_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='notificationsetting',
            unique_together={('user',)},
        ),
        migrations.AlterUniqueTogether(
            name='leavebalanceopenings',
            unique_together={('leave_type', 'user', 'year')},
        ),
        migrations.AddIndex(
            model_name='leaveapplication',
            index=models.Index(fields=['appliedBy', 'status'], name='idx_leave_application_status'),
        ),
        migrations.AddIndex(
            model_name='holiday',
            index=models.Index(fields=['start_date'], name='tbl_holiday_start_d_ec13a0_idx'),
        ),
        migrations.AddIndex(
            model_name='holiday',
            index=models.Index(fields=['end_date'], name='tbl_holiday_end_dat_a078a1_idx'),
        ),
        migrations.AddIndex(
            model_name='holiday',
            index=models.Index(fields=['is_yearly_recurring'], name='tbl_holiday_is_year_643e89_idx'),
        ),
        migrations.AddIndex(
            model_name='gender',
            index=models.Index(fields=['gender'], name='idx_gender_gender'),
        ),
        migrations.AddIndex(
            model_name='family',
            index=models.Index(fields=['relationship'], name='idx_family_relationship'),
        ),
        migrations.AddIndex(
            model_name='employeeshift',
            index=models.Index(fields=['employee', 'shift_timing'], name='idx_employee_shift'),
        ),
        migrations.AddConstraint(
            model_name='employeeshift',
            constraint=models.UniqueConstraint(fields=('employee', 'shift_timing'), name='unique_employee_shift'),
        ),
        migrations.AddConstraint(
            model_name='designation',
            constraint=models.UniqueConstraint(fields=('designation',), name='unique_designation_name'),
        ),
        migrations.AddConstraint(
            model_name='department',
            constraint=models.UniqueConstraint(fields=('department',), name='unique_department_name'),
        ),
        migrations.AddIndex(
            model_name='correspondingaddress',
            index=models.Index(fields=['zipcode'], name='idx_corresponding_zipcode'),
        ),
        migrations.AddIndex(
            model_name='bankdetails',
            index=models.Index(fields=['user', 'account_number'], name='idx_user_account'),
        ),
        migrations.AddConstraint(
            model_name='bankdetails',
            constraint=models.UniqueConstraint(fields=('user', 'account_number'), name='unique_user_account'),
        ),
        migrations.AddIndex(
            model_name='attendancelog',
            index=models.Index(fields=['applied_by'], name='tbl_events_applied_a60e27_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancelog',
            index=models.Index(fields=['status'], name='tbl_events_status_c145dc_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancelog',
            index=models.Index(fields=['start_date'], name='tbl_events_start_d_bb7bb9_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancelog',
            index=models.Index(fields=['end_date'], name='tbl_events_end_dat_82bb32_idx'),
        ),
    ]
